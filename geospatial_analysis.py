# -*- coding: utf-8 -*-
"""Geospatial_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VyPGl_CUtnKlhXjnLW9OrG1H8rYub4JD

**Geospatial Analysis using Geopandas**

**Installing Geopandas Library**
"""

!pip install geopandas

"""**Importing Library**"""

import geopandas as gpd
import matplotlib.pyplot as plt
import pandas as pd

gpd.__version__

"""**Reading Dataset(Nepal Districts)**"""

df = gpd.read_file('/content/district.shp')
df.head()

"""**Basic Map**"""

df.plot()

df.plot(column="SUM_area")

df.plot(column="SUM_area", cmap='RdYlBu', legend=True, vmin=1000, vmax=8000,
        legend_kwds={"label": "Shape Area"})

"""**Interacting with axis and label**"""

fig, ax1 = plt.subplots(1,1,figsize=(10,7))
ax1.set_title("Nepal Shape Area")
plot = df.plot(column="SUM_area", ax=ax1, cmap='hsv', legend=True, vmin=1000, vmax=8000,
        legend_kwds={"label": "Shape Area"})
ax1.set_xlabel("Longitude")
ax1.set_ylabel("Latitude")

"""**Automation**"""

provinces = df['Province'].unique()
provinces

fig, ax = plt.subplots(2,4,figsize=(15,10))
axis = ax.flatten()

axis[7].remove()
print(axis)
for i, (ax, province) in enumerate(zip(axis,provinces)):

  df_province = df[df['Province']==province]

  ax.set_title(f"{province} Province (Shape Area)")
  plot = df_province.plot(column="SUM_area", ax=ax, cmap='RdYlGn', edgecolor='#000000')
  ax.set_xticks([])
  ax.set_yticks([])

import numpy as np

# getting start with matplotlib suplots
fig, ax = plt.subplots(2,4,figsize=(20,12))
axis = ax.flatten()

# remove the last unncessary axis
axis[7].remove()

# for loop based on axis and province
for i, (ax, province) in enumerate(zip(axis,provinces)):

  # select the province
  df_province = df[df['Province']==province]

  # calculate geometry bounds
  x1, y1, x2, y2 = df_province.geometry.total_bounds

  # zoom to the selected feature
  max_range = np.array([x2-x1, y2-y1]).max()/2.0
  ax.set_xlim((x1+x2)*0.5-max_range-0.05, (x1+x2)*0.5+max_range+0.05)
  ax.set_ylim((y1+y2)*0.5-max_range-0.05, (y1+y2)*0.5+max_range+0.05)

  # label feature on map
  df_province.apply(lambda x: ax.annotate(text=x.DISTRICT, xy=x.geometry.centroid.coords[0], ha='center', size=7),axis=1)

  # plot province shape area
  ax.set_title(f"{province} Province (Shape Area)")
  plot = df_province.plot(column="SUM_area", ax=ax, cmap='RdYlGn')
  ax.set_xticks([])
  ax.set_yticks([])

# Remove unncessary white spaces
fig.tight_layout()
fig.savefig('/content/final_map.jpg', dpi=500, bbox_inches='tight')